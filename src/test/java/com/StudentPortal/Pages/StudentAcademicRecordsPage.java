package com.StudentPortal.Pages;

import static com.framework.elements.Locator.byCSSSelector;
import static com.framework.elements.Locator.byId;
import static com.framework.elements.Locator.byXPath;

import org.apache.tools.ant.taskdefs.WaitFor;
import static com.framework.elements.Locator.byName;

import com.framework.base.BasePage;
import com.framework.elements.AngDropDown;
import com.framework.elements.Button;
import com.framework.elements.Checkbox;
import com.framework.elements.CustomAsserts;
import com.framework.elements.Link;
import com.framework.elements.TextField;
import com.framework.util.StringHash;

public class StudentAcademicRecordsPage extends BasePage{
	
	
	static Link StudentCourses = new Link("Click on Student Courses span", byXPath("//li[3]/div/div[3]/div"));
	static Button FilterDropDwon = new Button("Click Filter Drop Down", byXPath("(//a[@class=\"k-button k-split-button-arrow\"])[1]"));
	static Button ClearFiltersButton = new Button("Click Filter Button", byId("listClearFiltersButton"));
	static AngDropDown StuNumDropDown = new AngDropDown("Click Student Number Dropdown", byXPath("//th[2]/a/span"));
	static Button StuNumFilter = new Button("Click Stud Num Filter", byXPath("//span[.=\"Filter\"]"));
	static TextField value = new TextField("Enter Value", byXPath("//input[@title=\"Value\"]"));
	static Button FilterButton = new Button("Click Filter Button", byXPath("//button[text()=\"Filter\"]"));
	//X-Path Parameter	static Link ClickStudent = new Link("Click Student Name",byXPath("//span[.=\"Harris, Colette\"]"));
	static Link AcademicRecords = new Link("Click Academic Records", byXPath("(//li[@role=\"menuitem\"])[3]"));
	static Link NewEnrButton = new Link("Click New", byId("newButton"));
	static Link ClickNext1 = new Link("Click New", byId("studentSelectionProceedButton"));
	static Link SchoolStatusSpan = new Link("Click School Status Span", byXPath("//div/div[1]/cmc-drop-down-list-classic[2]/div/div/span/span/span[. = ' ']"));
	static TextField EnterSchoolStatus = new TextField("Enter School Status", byXPath("//input[@aria-owns=\"SchoolStatusId_listbox\"]"));
	//	X-Path Parameter	static Button SelectSchoolStatus = new Button("Select School Status", byXPath("//span[.=\"Being Processed\"]"));
	static Button ClickProgram = new Button("Click Program", byXPath("//span[@aria-label=\"Program: Dropdown\"]"));
	static TextField ProgramName = new TextField("Enter Program Name", byXPath("//input[@aria-owns=\"ProgramId_listbox\"]"));
	//X-Path Parameter	static Button SelectProgram = new Button("Select Program", byXPath("//span[.=\"Advanced & Continuous Studies\"]"));
	static Link ClickProgramVersion = new Link("Click Program Version", byXPath("//span[@aria-owns=\"ProgramVersionId_listbox\"]"));
	static TextField EnterProgramVersion = new TextField("Enter School Status", byXPath("//input[@aria-owns=\"ProgramVersionId_listbox\"]"));
    static Link ClickFilter = new Link("Click Filter", byXPath("//a[text()=\"Clear Filters\"]"));
    static Link CourseCodeDropdown = new Link("Click Course Code dropdown", byXPath("(//a[@aria-label=\"Column Settings\"])[1]"));
    static Button CClFilterDropDown = new Button("Click Filter", byXPath("//span[text()=\"Filter\"]"));
    static TextField Value = new TextField("Click Filter", byXPath("//input[@title=\"Value\"]"));
    static Button Filter = new Button("Filter Button", byXPath("//button[text()=\"Filter\"]"));
	static TextField Notes = new TextField("Enter Notes", byXPath("//textarea[@aria-label=\"Notes\"]"));
	static TextField Course = new TextField("Course Field", byCSSSelector("#search_display_courseId"));
	static TextField SearchBox = new TextField("SearchBox", byCSSSelector("#search"));
	static Checkbox Input = new Checkbox("Input", byXPath("//td/input"));
	static Button Select = new Button("Select button", byXPath("//button[. = 'Select']"));
	//	static TextField Term = new TextField("Course Field", byCSSSelector("#search_display_termId"));
	static Button SaveAndRegister = new Button("Save and Register", byXPath("//cmc-toolbar-button-save-new[2]//button"));
	static Button AddCourseWithoutCategory = new Button("Add course without category", byCSSSelector("#courseTakenNotAppliedDialogOkButton"));
	static Link Next = new Link("Next", byId("courseInformationProceedButton"));
	//static Link InstructorTableCell = new Link("InstructorTableCell", byCSSSelector("#classSectionGrid_cmcGrid_active_cell"));
	static TextField Term = new TextField("Enter Term", byXPath("//input[@name=\"termId_input\"]"));	
	static Link Register = new Link("Click on register link", byId("courseUnRegisterButton")); 
	static Button RegisterButton = new Button("Register", byXPath("(//a[.=\"Register\"])[3]"));
	//static Link Drop = new Link("Drop Link", byCSSSelector("#courseDropButton"));
	static Link Drop = new Link("Drop Link", byXPath("//a[8][. = 'Drop']"));
	static Link DropLetterGrade = new Link("Click Drop Letter Grade", byXPath("//span[@aria-label=\"Letter Grade: Dropdown\"]"));
	static TextField EnterDropLetterGrade = new TextField("Enter Drop Letter Grade", byXPath("//input[@aria-owns=\"letterGrade_listbox\"]"));
	static Link ClickDropGradeReasons = new Link("Click Grade Reasons", byXPath("//span[@aria-owns=\"dropReason_listbox\"]"));
	static TextField EnterReason = new TextField("Enter Grade Reasons", byXPath("//input[@aria-owns=\"dropReason_listbox\"]"));
	static Button ClickEnteredReason = new Button("Click Entered Reason", byXPath("(//li[.=\"Degree change\"])[1]"));
	static Button DropButton = new Button("Click Drop Button", byXPath("//button[.=\"Drop\"]"));
	//	static Link ClickCourse = new Link("Click Course", byXPath("//span[.=\"APR110E\"]")); 
	static Link Attendence = new Link("Click Attendence", byXPath("//li[@aria-controls=\"Attendance\"]"));
	static TextField EnterAttendenceInMin = new TextField("Enter Attendence in Minutes", byXPath("(//input[@aria-label=\"Minutes\"])[1]"));
	static Button ClickSave = new Button("Click Save", byId("attendanceDetailSaveButton"));
	static Link FinalGrades = new Link("Click Final Grades", byXPath("//li[@aria-controls=\"Final Grades\"]"));
	static TextField NumericGrade = new TextField("Enter Numeric Grade", byXPath("(//input[@aria-label=\"Numeric Grade\"])[2]"));
	static TextField LetterGrade = new TextField("Enter Letter Grade", byName("letterGrade_input"));
	static Button SaveClose = new Button("Click Save and Close", byXPath("(//button[@aria-label=\"Save & Close\"])[2]"));
	static Link StudentStatusHistory = new Link("Click Status Change", byXPath("//li[3]/div/div[7]/div"));
	static Link ChangeStatus = new Link("Click Change Status", byId("studentStatusChangeButton"));
	static Button NewStatus = new Button("Click New Status", byXPath("//span[@aria-owns=\"newStatus_listbox\"]"));
	static TextField EnterNewStatus = new TextField("Enter New Status", byXPath("//input[@aria-owns=\"newStatus_listbox\"]"));
	static TextField EffectiveDate = new TextField("Enter Chnage Status Effective Date", byXPath("//input[@name=\"changeStatusDate1\"]"));
	static Button ChangeButton = new Button("Click Change Button", byXPath("//button[.=\"Change\"]"));
	//Transfer Credits Web Elements
	static Link TransderCredits = new Link("Click Transfer Credits", byXPath("//span[. = \"Transfer Credits\"]"));
	static Link NewTC = new Link("Click New Button", byXPath("//a[5][. = 'New']"));
	static TextField TransferTypes = new TextField("Enter Transfer Types", byName("transferCreditType_input"));
	static TextField TransferStatus = new TextField("Enter Transder Status", byName("transferCreditStatus_input"));
	//	static Button SelectTransferStatus = new Button("Select Transfer Types", byXPath("//span[. = 'College Transfer has been approved']"));
	static Link TCTermSpan = new Link("Click Term Span", byId("search_display_termIdAdvance"));
	static TextField TCEnterTermCode = new TextField("Enter Term Code", byId("search"));
	//	static Checkbox CheckTermCode = new Checkbox("Check Term Code", byXPath("//input[@aria-label='"+data.get("TermCode")+"']"));
	static Button TCSelect = new Button("Click Select", byXPath("//button[. = 'Select']"));
	static TextField TCGrade = new TextField("Click Grade", byXPath("//span/span/span[. = ' ']"));
	//	static Button SelectTCGrade = new Button("Click Grade", byXPath("//li[. ='"+data.get("TermCode")+"']"));
	static Link TCExInstAdd = new Link("Click Add to add external institute", byXPath("//div[2]/div/div/cns-grid//a[. = 'Add']"));
	static TextField ExInstitute = new TextField("Enter External Institution", byName("institutionId_input"));
	static Button SelectExInstitute = new Button("Select ExInstitute", byXPath("//span[. = 'ABC BEAUTY ACADEMY']"));
	static TextField ExCourse = new TextField("Enter Course", byName("institutionCourseId_input"));
	static Button SelectExCourse = new Button("Select Course", byXPath("//span[. = 'ENG01']"));
	static TextField DateCompleted= new TextField("Enter Date Completed", byId("dateCompletedId"));
	static TextField GradeReceived= new TextField("Enter Grade Received", byId("extCollegeGradeReceivedId"));
	static Button ExOk = new Button("Click External OK", byId("saveInstitutionId"));
	static Link TCIntInstAdd = new Link("Click Add Internal Institute", byXPath("(//a[.=\"Add\"])[2]"));
	static TextField CampusCourse = new TextField("Enter Internal Campus Course", byName("campusCourseId_input"));
	static Button ClickOk = new Button("Click OK", byId("saveCampusCourseId"));
	static Button TCSaveClose = new Button("Click Save and Close", byXPath("//div[2]//button[@aria-label=\"Save & Close\"]"));	
	//Program Change Web Elements
	static Link Enrollments = new Link("Click Transfer Credits", byXPath("//span[. = \"Enrollments\"]"));
	static AngDropDown Maindropdown = new AngDropDown("Click Awards Drop Down", byXPath("//div[2]/cns-grid/div[1]/cns-grid-toolbar/cmc-common-toolbar/div/div[2]/a[2]"));
	static Button MainClearFilter = new Button("Click Clear Filter", byXPath("//div//a[. = 'Clear Filters']"));
	static AngDropDown Enroldropdown = new AngDropDown("Click Fund Source drop down", byXPath("(//a[@title=\"Column Settings\"])[1]"));
	static Button EnrolFilter = new Button("Click Filter", byXPath("//span[text()=\"Filter\"]"));
	static AngDropDown ClickEqualsTo = new AngDropDown("Click Equals To", byXPath("//div/span[1]/span/span[. = 'Is equal to']"));
	static TextField EnrolValue = new TextField("Enter value", byXPath("//input[@title=\"Value\"]"));
	static Button EnrolFilterButton = new Button("Click Filter Button", byXPath("//button[.=\"Filter\"]"));
	static AngDropDown More = new AngDropDown("Click More", byXPath("//div[5]/a[2]"));
	static Link ProgramChange = new Link("Click Program Change", byId("programChangeButton"));
	static Button ProgramSpan = new Button("Click Program Span", byXPath("//span[@aria-label=\"Program: Dropdown\"]"));
	static TextField EnterProgramName = new TextField("Enter Program", byXPath("//input[@aria-owns=\"ProgramId_listbox\"]"));
	//static Button SelectProgram = new Button("Select Program", byXPath("//span[.=\"Nora's Bachelor of Arts\"]"));
	static Button PVSpan = new Button("Click PV Span", byXPath("//span[@aria-owns=\"ProgramVersionId_listbox\"]"));
	static TextField EnterPVName = new TextField("Enter Program Version", byXPath("//input[@aria-owns=\"ProgramVersionId_listbox\"]"));
	//static Button SelectPV = new Button("Select Program Version", byXPath("//span[.=\"Bachelor of Arts: Business\"]"));
	static Button ShiftSpan = new Button("Click Shift Span", byXPath("//span[@aria-label=\"Shift: Dropdown\"]"));
	static TextField EnterShift = new TextField("Enter Shift", byXPath("//input[@aria-owns=\"shiftId_listbox\"]"));
	//static Button SelectShift = new Button("Select shift", byXPath("//span[.=\"Day\"]"));
	static Button GradeLevelSpan = new Button("Click Grade Level Span", byXPath("//span[@aria-label=\"Grade Level: Dropdown\"]"));
	static TextField EnterGradeLevel = new TextField("Enter Grade Level", byXPath("//input[@aria-owns=\"gradeLevelId_listbox\"]"));
	//static Button SelectGradeLevel = new Button("Select Grade Level", byXPath("//div/span[. = '1st year, never attended college']"));
	static Button CatalogSpan = new Button("Click Catalog Span", byXPath("//span[@aria-label=\"Catalog: Dropdown\"]"));
	static TextField EnterCatalog = new TextField("Enter Catalog", byXPath("//input[@aria-owns=\"catalogYearId_listbox\"]"));
	//static Button Selectcatalog = new Button("Select Catalog", byXPath("//span[.=\"2021 Catalog\"]"));
	static TextField EnterBillingMethod = new TextField("Enter Billing Method", byName("billingMethodId_input"));
	static TextField GraduateDate = new TextField("Enter Graduate Date", byId("graduationDate"));
	static Button PVNext = new Button("Click Next", byId("programSelectionProceedButton"));
	static Button CourseNext = new Button("Click Next", byId("studentCourseProceedButton"));
	static Button FeeNext = new Button("Click Next", byId("feeProceedButton"));
	static Link Change = new Link("Click Change Button", byXPath("(//a[@id=\"programChangeSaveButton\"])[2]"));
	static Button Yes = new Button("Click Yes", byId("terminationBudgetConfigDialogOkButton"));
	static Button StartDateSpan = new Button("Click Start Date Span", byXPath("//span[@aria-label=\"Start Date: Dropdown\"]"));
	static TextField EnterStartDate = new TextField("Enter Start Date", byXPath("//input[@aria-owns=\"StartDateId_listbox\"]"));
	//static Button SelectStartDate = new Button("Select Start Date", byXPath("//span[.=\"NMBFA22\"]"));	
	//Minimum Registration Lock
	static Link Unregister = new Link("Click Unregister", byXPath("//div/a[.=\"Unregister\"]"));
	static Link RegistrationLock = new Link("Click Registration Lock", byXPath("//a[.=\"Registration Lock\"]"));
	
	//Add Course to Student Schedule
	static Link AddCourseNew = new Link("Click New Button", byId("addCourseButton"));
	static Link AddCourseSpan = new Link("Click Course Span", byXPath("//div[@aria-label=\"Course\"]"));
	static TextField AddSearchCourse = new TextField("Enter Course Code", byId("search"));
	//static Checkbox CheckCourseCode= new Checkbox("Check Course", byXPath("//input[@aria-label=\"APR117A\"]"));
	static Button SelectButton = new Button("Click Select", byXPath("//button[.=\"Select\"]"));
	static Button AddSaveClose = new Button("Click Save and Close", byXPath("(//button[@aria-label=\"Save & Close\"])[2]"));
	static Button AddwithoutCategory = new Button("Add without category", byId("courseTakenNotAppliedDialogOkButton"));
	
	
	public StudentAcademicRecordsPage AddCourseToStudentSchedule(StringHash data) throws Exception{

		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Course records were successfully saved.']"));
		Checkbox CheckCourseCode= new Checkbox("Check Course", byXPath("//input[@aria-label='"+data.get("CourseCode")+"']"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		AddCourseNew.click();
		wait(10);
		AddCourseSpan.click();
		AddSearchCourse.clearAndType(data.get("CourseCode"));
		CheckCourseCode.check();
		SelectButton.click();
		AddSaveClose.click();
		AddwithoutCategory.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
	}
	
	public StudentAcademicRecordsPage RegisterCourse(StringHash data) throws Exception{

		Link InstructorTableCell = new Link("Click on Instructor table cell", byXPath("//td[. = '"+data.get("InstructorName")+"']"));
		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Link SelectTerm = new Link("Select Term", byXPath("//span[.='"+data.get("TermCode")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Course records were successfully registered.']"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(5);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(6);
		ClickCourseCode.click();
		wait(5);
		Register.click();
		waitForPageToLoad();
		wait(10);
		scrollPage(0, 300);
		wait(5);
		Term.clearAndType(data.get("TermCode"));
		wait(2);
		SelectTerm.click();
		wait(2);
		//Notes.clearAndType("Registering a Student");
		//wait(2);
		Next.waitTillElementClickable();
		Next.click();
		wait(4);
		InstructorTableCell.waitTillElementClickable();
		InstructorTableCell.click();
		wait(2);
		scrollPage(0, 400);
		wait(2);
		RegisterButton.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
	}

	public StudentAcademicRecordsPage DropCourse(StringHash data) throws Exception{

		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Button ClickDropGrade = new Button("Click Drop Grade", byXPath("//li[.='"+data.get("DropGrade")+"']"));
		//	Button ClickEnteredReason = new Button("Click Entered Reason", byXPath("(//li[.='"+data.get("DropGrade")+"'[1]"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Course records were successfully dropped.']"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(10);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(2);
		ClickCourseCode.click();
		wait(4);
		Drop.waitTillElementClickable();
		Drop.click();
		waitForPageToLoad();
		wait(5);
		DropLetterGrade.waitTillElementClickable();
		DropLetterGrade.click();
		wait(3);
		EnterDropLetterGrade.clearAndType(data.get("LetterGrade"));
		wait(3);
		ClickDropGrade.click();
		wait(2);
		ClickDropGradeReasons.click();
		wait(2);
		EnterReason.sendKeys(data.get("DropReason"));
		wait(2);
		ClickEnteredReason.click();
		wait(2);
		DropButton.waitTillElementClickable();
		DropButton.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
	}

	public StudentAcademicRecordsPage IndividualAttendence(StringHash data) throws Exception{

		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Link ClickCourse = new Link("Click Course", byXPath("//span[.= '"+data.get("CourseCode")+"']"));
		Link ClickDate = new Link("Click Attendence Date", byXPath("//span[.='"+data.get("AttendenceDate")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Attendance records were successfully saved.']"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(2);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(2);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(10);
		ClickCourse.click();
		waitForPageToLoad();
		wait(10);
		scrollPage(0, -200);
		wait(4);
		Attendence.waitTillElementClickable();
		Attendence.click();
		wait(4);
		scrollPage(0, 500);
		wait(2);
		ClickDate.waitTillElementClickable();
		ClickDate.click();
		wait(4);
		EnterAttendenceInMin.sendKeys(data.get("AttendenceInMinutes"));
		wait(2);
		ClickSave.waitTillElementClickable();
		ClickSave.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
	}
	public StudentAcademicRecordsPage individualFinalGradesPage(StringHash data) throws Exception{

		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Link ClickCourse = new Link("Click Course", byXPath("//span[.= '"+data.get("CourseCode")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Course records were successfully saved.']"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		waitForPageToLoad();
		wait(10);
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		wait(2);
		waitForPageToLoad();
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(10);
		ClickCourse.click();
		waitForPageToLoad();
		wait(10);
		scrollPage(0, -200);
		wait(4);
		FinalGrades.waitTillElementClickable();
		FinalGrades.click();
		wait(4);
		NumericGrade.sendKeys(data.get("NumericFinalGrade"));
		//	LetterGrade.waitTillElementFound();
		//	NumericGrade.sendKeys(data.get("LetterFinalGrade"));
		wait(2);
		SaveClose.waitTillElementClickable();
		SaveClose.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
	}

	public StudentAcademicRecordsPage StatusChangePage(StringHash data) throws Exception{

		Button SelectNewStatus = new Button("Select New Status", byXPath("//li[.='"+data.get("NewStatus")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Status was successfully changed.']"));
		
		waitForPageToLoad();
		wait(10);
		AcademicRecords.click();
		wait(2);
		StudentStatusHistory.waitTillElementClickable();
		StudentStatusHistory.click();
		waitForPageToLoad();
		wait(5);
		ChangeStatus.waitTillElementClickable();
		ChangeStatus.click();
		waitForPageToLoad();
		wait(5);
		NewStatus.click();
		wait(2);
		EnterNewStatus.sendKeys(data.get("NewStatus"));
		wait(2);
		SelectNewStatus.click();
		wait(2);
		EffectiveDate.waitTillElementFound();
		EffectiveDate.clearAndType(data.get("StatusChangeDate"));
		wait(2);
		ChangeButton.waitTillElementClickable();
		ChangeButton.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(10);
		return this;
	}

	public StudentAcademicRecordsPage TransferCreditsPage(StringHash data) throws Exception{

		Checkbox CheckTermCode = new Checkbox("Check Term Code", byXPath("//input[@aria-label='"+data.get("TermCode")+"']"));
		Button SelectTCGrade = new Button("Click Grade", byXPath("//li[. ='"+data.get("Grade")+"']"));
		Button SelectTransferStatus = new Button("Select Transfer Types", byXPath("//span[. ='"+data.get("TransferStatus")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Transfer Credits records were successfully saved.']"));
		
		waitForPageToLoad();
		wait(10);
		AcademicRecords.click();
		wait(2);
		TransderCredits.click();
		waitForPageToLoad();
		wait(10);
		NewTC.click();
		waitForPageToLoad();
		wait(10);
		scrollPage(0, 500);
		wait(2);
		TransferTypes.clearAndType(data.get("TransferTypes"));
		wait(2);
		TransferStatus.sendKeys(data.get("TransferStatus"));
		wait(2);
		SelectTransferStatus.click();
		wait(2);
		TCTermSpan.click();
		wait(4);
		TCEnterTermCode.clearAndType(data.get("TermCode"));
		wait(4);
		CheckTermCode.check();
		wait(2);
		TCSelect.click();
		waitForPageToLoad();
		wait(5);
		/*TCGrade.sendKeys(data.get("Grade"));
		wait(4);
		SelectTCGrade.click();
		wait(4);
		*/
		TCExInstAdd.click();
		wait(2);
		ExInstitute.clearAndType(data.get("ExternalInstituion"));
		wait(2);
		SelectExInstitute.click();
		wait(2);
		ExCourse.clearAndType(data.get("ExternalCourse"));
		wait(2);
		SelectExCourse.click();
		wait(2);
		DateCompleted.clearAndType(data.get("DateCompleted"));
		wait(2);
		GradeReceived.clearAndType(data.get("ReceivedGrade"));
		wait(2);
		ExOk.click();
		wait(4);
		scrollPage(0, 500);
		wait(4);
		TCIntInstAdd.click();
		wait(5);
		CampusCourse.clearAndType(data.get("CampusCourse"));
		wait(2);
		ClickOk.click();
		wait(2);
		scrollPage(0, -1000);
		wait(2);
		TCSaveClose.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(10);
		return this;
	}

	public StudentAcademicRecordsPage ProgramChangePage(StringHash data) throws Exception{

		TextField HighlightProgramVersion = new TextField("Highlight Program Version", byXPath("//td[.='"+data.get("Status")+"']"));
		Link SelectProgram = new Link("Select Program", byXPath("(//span[.='"+data.get("NewProgramCode")+"'])[1]"));
		Link SelectPV = new Link("Select Program Version", byXPath("//div/span[.='"+data.get("NewProgramVersionName")+"']"));
		Link SelectShift = new Link("Select shift", byXPath("//span[.='"+data.get("Shift")+"']"));
		Link SelectGradeLevel = new Link("Select Grade Level", byXPath("//div/span[. = '"+data.get("GradeLevel")+"']"));
		Link Selectcatalog = new Link("Select Catalog", byXPath("//span[.='"+data.get("Catalog")+"']"));
		Link ValidationMessage = new Link("Validation Message", byXPath("//span[.='The Enrollment records were successfully saved.']"));
		Link SelectStartDate = new Link("Select Start Date", byXPath("//span[.='"+data.get("StartDateCode")+"']"));
		
		waitForPageToComplete();
		wait(10);
		AcademicRecords.click();
		wait(2);
		Enrollments.click();
		waitForPageToLoad();
		Maindropdown.click();
		wait(2);
		MainClearFilter.click();
		wait(5);
		Enroldropdown.click();
		wait(2);
		EnrolFilter.click();
		wait(2);
		EnrolValue.clearAndType(data.get("ProgramVersionName"));
		wait(2);
		EnrolFilterButton.click();
		wait(10);
		HighlightProgramVersion.click();
		wait(5);
		More.click();
		wait(2);
		ProgramChange.click();
		wait(2);
		waitForPageToLoad();
		ProgramSpan.click();
		wait(2);
		EnterProgramName.clearAndType(data.get("NewProgramName"));
		wait(2);
		SelectProgram.click();
		wait(2);
		PVSpan.click();
		wait(2);
		EnterPVName.clearAndType(data.get("NewProgramVersionName"));
		wait(2);
		SelectPV.click();
		wait(2);
		StartDateSpan.click();
		wait(2);
		EnterStartDate.clearAndType(data.get("StartDateName"));
		wait(2);
		SelectStartDate.click();
		wait(2);
		ShiftSpan.click();
		wait(2);
		EnterShift.clearAndType(data.get("Shift"));
		wait(2);
		SelectShift.click();
		wait(2);
		GradeLevelSpan.click();
		wait(2);
		EnterGradeLevel.clearAndType(data.get("GradeLevel"));
		wait(2);
		SelectGradeLevel.click();
		wait(2);
		CatalogSpan.click();
		wait(2);
		EnterCatalog.clearAndType(data.get("Catalog"));
		wait(2);
		Selectcatalog.click();
		wait(4);
		scrollPage(0, 500);
		wait(2);
		//GraduateDate.clearAndType(data.get("GraduateDate"));
		wait(2);
		//EnterBillingMethod.clearAndType(data.get("BillingMethod"));
		//wait(2);
		PVNext.click();
		wait(4);
		Yes.click();
		wait(4);
		CourseNext.click();
		wait(2);
		FeeNext.click();
		wait(2);
		Change.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("SuccessMessage").toString());
		wait(10);
		return this;
	}
	public StudentAcademicRecordsPage verifyMinimumLimitPage(StringHash data) throws Exception{

		Link InstructorTableCell = new Link("Click on Instructor table cell", byXPath("//td[. = '"+data.get("InstructorName")+"']"));
		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		TextField ValidationMessage = new TextField("Get the validation point", byXPath("//span[.=\"Minimum Limit\"]"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(5);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(2);
		ClickCourseCode.click();
		wait(3);
		Register.click();
		waitForPageToLoad();
		wait(4);
		scrollPage(0, 300);
		wait(2);
		Notes.clearAndType("Registering a Student");
		wait(2);
		Next.waitTillElementClickable();
		Next.click();
		wait(4);
		InstructorTableCell.waitTillElementClickable();
		InstructorTableCell.click();
		wait(2);
		scrollPage(0, 400);
		wait(2);
		RegisterButton.click();
		wait(2);
		scrollPage(0, -1000);
		wait(15);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(2);
		ClickCourseCode.click();
		wait(3);
		Unregister.click();
		wait(10);
		RegistrationLock.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("ValidationPoint").toString());
		wait(10);
		return this;
	}
	public StudentAcademicRecordsPage verifyMaximumLimitPage(StringHash data) throws Exception{
	
		Link InstructorTableCell = new Link("Click on Instructor table cell", byXPath("//td[. = '"+data.get("InstructorName")+"']"));
		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		TextField ValidationMessage = new TextField("Get the validation point", byXPath("//span[.=\"Maximum Limit\"]"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(5);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(2);
		ClickCourseCode.click();
		wait(3);
		Register.click();
		waitForPageToLoad();
		wait(4);
		scrollPage(0, 300);
		wait(2);
		Notes.clearAndType("Registering a Student");
		wait(2);
		Next.waitTillElementClickable();
		Next.click();
		wait(4);
		InstructorTableCell.waitTillElementClickable();
		InstructorTableCell.click();
		wait(2);
		scrollPage(0, 400);
		wait(2);
		RegisterButton.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("ValidationPoint").toString());
		wait(10);
		return this;
	}
	
	public StudentAcademicRecordsPage VerifyScheduleLockPage(StringHash data) throws Exception{
		
		Link InstructorTableCell = new Link("Click on Instructor table cell", byXPath("//td[. = '"+data.get("InstructorName")+"']"));
		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		TextField ValidationMessage = new TextField("Get the validation point", byXPath("//span[.=\"Schedule Change\"]"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(5);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(2);
		ClickCourseCode.click();
		wait(3);
		Register.click();
		waitForPageToLoad();
		wait(4);
		scrollPage(0, 300);
		wait(2);
		Notes.clearAndType("Registering a Student");
		wait(2);
		Next.waitTillElementClickable();
		Next.click();
		wait(4);
		InstructorTableCell.waitTillElementClickable();
		InstructorTableCell.click();
		wait(2);
		scrollPage(0, 400);
		wait(2);
		RegisterButton.click();
		wait(10);
		CustomAsserts.containsString(ValidationMessage.getText(), data.get("ValidationPoint").toString());
		wait(10);
		return this;
	}
	
	public StudentAcademicRecordsPage DeleteCoursePage(StringHash data) throws Exception{

		Link ClickCourseCode = new Link("Click Course Code", byXPath("//input[@aria-label = '"+data.get("CourseCode")+"']"));
		Link ClickStudent = new Link("Click Student Name",byXPath("//span[.='"+data.get("StudentName")+"']"));
		Link SuccessMessage = new Link("Validation Message", byXPath("//span[. = 'The Student Course records were successfully deleted.']"));
		Button DeleteButton = new Button("Click Delete Button", byId("deletedCourseButton"));
		Button ConfirmDeleteButton = new Button("Click Confirm Delete Button", byId("confirmDeleteDialogOkButton"));
		Link reasonsdropdown = new Link("Click Reason drop down", byXPath("//span[@aria-owns=\"DeletewithReasoncode_listbox\"]"));
		TextField EnterReason = new TextField("Enter Reason", byXPath("//input[@aria-owns='"+data.get("DeleteReason")+"']"));
		Button SelectReason = new Button("Select Reason", byXPath("(//li[.=\"Academic Suspension\"])[2]"));
		Button OkDelete = new Button("Delete Button", byXPath("(//button[.=\"Delete\"])[2]"));
		Button FinalDelete = new Button("Final Delete Button", byId("deleteValidationDialogOkButton"));
		
		waitForPageToLoad();
		wait(10);
		FilterDropDwon.click();
		wait(2);
		ClearFiltersButton.click();
		wait(2);
		StuNumDropDown.click();
		wait(2);
		StuNumFilter.click();
		wait(2);
		value.clearAndType(data.get("StudentNumber"));
		wait(2);
		FilterButton.click();
		wait(4);
		ClickStudent.click();
		wait(10);
		waitForPageToLoad();
		AcademicRecords.waitTillElementClickable();
		AcademicRecords.click();
		wait(2);
		StudentCourses.waitTillElementClickable();
		StudentCourses.click();
		waitForPageToLoad();
		wait(5);
		CourseCodeDropdown.click();
		wait(2);
		CClFilterDropDown.click();
		wait(2);
		Value.clearAndType(data.get("CourseCode"));
		wait(2);
		Filter.click();
		wait(6);
		ClickCourseCode.click();
		wait(5);
		DeleteButton.click();
		ConfirmDeleteButton.click();
		reasonsdropdown.click();
		EnterReason.clearAndType(data.get("DeleteReason"));
		SelectReason.click();
		OkDelete.click();
		FinalDelete.click();
		wait(10);
		CustomAsserts.containsString(SuccessMessage.getText(), data.get("SuccessMessage").toString());
		wait(5);
		return this;
}
}
